generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  name      String
  email     String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  chatLogs  ChatLog[]
  notes     Note[]
  tasks     Task[]

  @@map("users")
}

model Task {
  id          String    @id @default(cuid())
  userId      String
  text        String
  priority    String    @default("MEDIUM")
  project     String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Calendar integration fields
  addToCalendar Boolean @default(false)
  eventDuration Int?
  eventTime     String?
  reminderMinutes Int?
  
  // Recurrence fields
  recurrence        Boolean   @default(false)
  recurrencePattern String?
  recurrenceCount   Int?
  recurrenceEndDate DateTime?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendarEvents TaskCalendarEvent[]
  
  @@index([userId])
  @@index([completed])
  @@index([dueDate])
}

model Note {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  title       String
  text        String
  cleanedText String?  @map("cleaned_text")
  summary     String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notes")
}

model ChatLog {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  query     String
  response  String
  modelProvider String? @map("model_provider")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("chat_logs")
}

model UserIntegration {
  id                String    @id @default(cuid())
  userId            String
  provider          String
  accessToken       String
  refreshToken      String?
  tokenExpiry       DateTime?
  isActive          Boolean   @default(true)
  defaultCalendarId String?   @default("primary")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  calendarWebhooks CalendarWebhook[]
  
  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
}

model TaskCalendarEvent {
  id              String    @id @default(cuid())
  taskId          String
  calendarId      String
  calendarEventId String
  eventTime       String?
  eventDuration   Int?
  reminderMinutes Int?
  
  // Recurrence fields
  recurrencePattern String?
  recurrenceCount   Int?
  recurrenceEndDate DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@index([taskId])
}

model CalendarWebhook {
  id                String   @id @default(cuid())
  channelId         String   @unique
  resourceId        String
  expiration        DateTime
  calendarId        String
  userIntegrationId String
  createdAt         DateTime @default(now())
  
  // Relations
  userIntegration UserIntegration @relation(fields: [userIntegrationId], references: [id], onDelete: Cascade)
  
  @@index([userIntegrationId])
  @@index([expiration]) // For cleanup of expired webhooks
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  name      String
  email     String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  chatLogs  ChatLog[]
  notes     Note[]
  tasks     Task[]

  @@map("users")
}

model Task {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  text        String
  cleanedText String?   @map("cleaned_text")
  completed   Boolean   @default(false)
  priority    Priority  @default(MEDIUM)
  project     String?
  dueDate     DateTime? @map("due_date")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("tasks")
}

model Note {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  title       String
  text        String
  cleanedText String?  @map("cleaned_text")
  summary     String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notes")
}

model ChatLog {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  query     String
  response  String
  modelProvider String? @map("model_provider")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("chat_logs")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
